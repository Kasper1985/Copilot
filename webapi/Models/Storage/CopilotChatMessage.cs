using System.ComponentModel;
using System.Text.Json;
using System.Text.Json.Serialization;
using WebApi.Enums;
using WebApi.Models.Response;
using WebApi.Storage.Interfaces;

namespace WebApi.Models.Storage;

public class CopilotChatMessage(string userId, string userName, string chatId, string content, string? prompt, IEnumerable<CitationSource>? citations,
    AuthorRoles authorRole = AuthorRoles.User, ChatMessageType type = ChatMessageType.Message, IDictionary<string, int>? tokenUsage = null) : IStorageEntity
{
    private static readonly JsonSerializerOptions SerializerSettings = new() { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };
    
    /// <summary>
    /// ID of the message.
    /// </summary>
    public string Id { get; set; } = Guid.NewGuid().ToString();
    
    /// <summary>
    /// Timestamp of the message.
    /// </summary>
    public DateTimeOffset Timestamp { get; set; }

    /// <summary>
    /// ID of the user who sent this message.
    /// </summary>
    public string UserId { get; set; } = userId;
    
    /// <summary>
    /// Name of the user who sent this message.
    /// </summary>
    public string UserName { get; set; } = userName;
    
    /// <summary>
    /// ID of the chat this message belongs to.
    /// </summary>
    public string ChatId { get; set; } = chatId;
    
    /// <summary>
    /// Content of the message.
    /// </summary>
    public string Content { get; set; } = content;
    
    /// <summary>
    /// Role of the author of the message.
    /// </summary>
    public AuthorRoles AuthorRole { get; set; } = authorRole;
    
    /// <summary>
    /// Prompt used to generate the message.
    /// Will be empty if the message was not generated by a prompt.
    /// </summary>
    public string Prompt { get; set; } = prompt ?? string.Empty;
    
    /// <summary>
    /// Citations of the message.
    /// </summary>
    public IEnumerable<CitationSource>? Citations { get; set; } = citations;

    /// <summary>
    /// Type of the message.
    /// </summary>
    public ChatMessageType Type { get; set; } = type;
    
    /// <summary>
    /// Counts of total token usage used to generate bot response.
    /// </summary>
    public IDictionary<string, int>? TokenUsage { get; set; } = tokenUsage;
    
    /// <summary>
    /// The partition key for the source.
    /// </summary>
    [JsonIgnore]
    public string Partition => ChatId;
    
    
    /// <summary>
    /// Create a mew chat message for the bot response.
    /// </summary>
    /// <param name="chatId">the chat ID that this message belongs to.</param>
    /// <param name="content">The message.</param>
    /// <param name="prompt">The prompt used to generate the message.</param>
    /// <param name="citations">Citations returned by bot.</param>
    /// <param name="tokenUsage">Total token usage of response completion.</param>
    public static CopilotChatMessage CreateBotResponseMessage(string chatId, string content, string prompt, IEnumerable<CitationSource>? citations, IDictionary<string, int>? tokenUsage = null) =>
        new("Bot", "Bot", chatId, content, prompt, citations, AuthorRoles.Bot, ChatMessageType.Message, tokenUsage);

    /// <summary>
    /// Serialize the object to a formatted string.
    /// </summary>
    /// <returns>A formatted string.</returns>
    public string ToFormattedString()
    {
        var messagePrefix = $"[{Timestamp:yyyy-MM-dd HH:mm:ss}]";
        switch (Type)
        {
            case ChatMessageType.Document:
                var documentMessage = DocumentMessageContent.FromString(Content);
                var documentMessageContent = documentMessage != null ? documentMessage.ToFormattedString() : "documents";
                
                return $"{messagePrefix} {UserName} uploaded {documentMessageContent}";
            case ChatMessageType.Plan:
            case ChatMessageType.Message:
                return $"{messagePrefix} {UserName} said: {Content}";
            default:
                throw new InvalidEnumArgumentException($"Unknown message type: {Type}");
        }
    }

    /// <summary>
    /// Serialize the object to a JSON string.
    /// </summary>
    /// <returns>A serialized JSON string.</returns>
    public override string ToString() => JsonSerializer.Serialize(this, SerializerSettings);
    
    /// <summary>
    /// Deserialize a JSON string to a <see cref="CopilotChatMessage"/> object.
    /// </summary>
    /// <param name="json">A JSON string with <see cref="CopilotChatMessage"/> object.</param>
    /// <returns>A <see cref="CopilotChatMessage"/> filled with data.</returns>
    public static CopilotChatMessage? FromString(string json) => JsonSerializer.Deserialize<CopilotChatMessage>(json, SerializerSettings);
}
